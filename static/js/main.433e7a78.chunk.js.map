{"version":3,"sources":["components/InfoBox.js","util.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","caseType","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortdata","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataomMap","Table","console","log","src","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","interesct","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","buikdChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","countryCode","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseType","countryName","setCountryName","name","iso2","getCountriesData","onCountryChange","event","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8YAoBeA,MAhBf,YAAyE,IAAvDC,EAAsD,EAAtDA,MAAgBC,GAAsC,EAA/CC,SAA+C,EAAtCD,OAAOE,EAA+B,EAA/BA,MAAMC,EAAyB,EAAzBA,OAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,qEACpE,OACI,kBAACC,EAAA,EAAD,CAAMC,QAAUF,EAAME,QACtBC,UAAS,kBAAaL,GAAU,oBAAvB,YAA8CD,GAAS,iBAC5D,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,iBACbZ,GAGjB,wBAAIS,UAAU,iBAAiBR,GAC/B,kBAACU,EAAA,EAAD,CAAYF,UAAU,gBAAgBG,MAAM,iBAAiBP,EAA7D,a,qECVEQ,EAAiB,CACnBZ,MAAM,CACFa,IAAK,UACLC,IAAK,iBACLC,WAAW,KAEfC,UAAU,CACNH,IAAK,UACLC,IAAK,kBACLC,WAAW,MAEfE,OAAO,CACHJ,IAAK,UACLC,IAAK,iBACLC,WAAW,MAKNG,EAAiB,SAACC,GAAD,OAC1BA,EAAK,IAAD,OAAKC,IAAQD,GAAME,OAAO,SAAU,MAE/BC,EAAW,SAACC,GACrB,IAAMC,EAAU,YAAOD,GAQvB,OAPAC,EAAWC,MAAK,SAACC,EAAEC,GACf,OAAGD,EAAE1B,MAAM2B,EAAE3B,OACD,EAED,KAGRwB,GCbII,MAjBf,YAAkD,IAApCC,EAAmC,EAAnCA,UAAUC,EAAyB,EAAzBA,UAAUC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACtC,OACI,yBAAKxB,UAAU,OACX,kBAAC,IAAD,CAAYuB,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,0ED4BH,SAACZ,GAAD,IAAOO,EAAP,uDAAiB,QAAjB,OACzBP,EAAKa,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACAP,OAAQ,CAACM,EAAQE,YAAYC,IAAIH,EAAQE,YAAYE,MACrDC,YAAa,GACb/B,MAAQC,EAAgBkB,GAAWjB,IACnC8B,UAAW/B,EAAgBkB,GAAWjB,IACtC+B,OACIC,KAAKC,KAAKT,EAAQP,IAAYlB,EAAgBkB,GAAWf,YAGzD,kBAACgC,EAAA,EAAD,KAEI,yBAAKvC,UAAU,kBACX,yBAAKA,UAAW,YACZwC,MAAO,CAACC,gBAAgB,OAAD,OAAQZ,EAAQE,YAAYW,KAA5B,QAI3B,yBAAK1C,UAAU,aAAa6B,EAAQA,SACpC,yBAAK7B,UAAU,cAAf,SAAmCY,IAAQiB,EAAQrC,OAAOqB,OAAO,QACjE,yBAAKb,UAAU,kBAAf,aAA2CY,IAAQiB,EAAQrB,WAAWK,OAAO,QAC7E,yBAAKb,UAAU,eAAf,UAAqCY,IAAQiB,EAAQpB,QAAQI,OAAO,cC9CvE8B,CAActB,EAAUC,M,OCS1BsB,MApBf,YAA6B,IAAbvB,EAAY,EAAZA,UAEZ,OADAwB,QAAQC,IAAI,qCAAqCzB,GAE7C,yBAAKrB,UAAU,SACTqB,EAAUO,KAAI,gBAAEC,EAAF,EAAEA,QAASrC,EAAX,EAAWA,MAAMuC,EAAjB,EAAiBA,YAAjB,OACZ,4BAEI,wBAAI/B,UAAU,cACV,yBAAKA,UAAW,aAChB+C,IAAKhB,EAAYW,OAEjB,6BAAMb,IAEV,4BAAI,gCAASjB,IAAQpB,GAAOqB,OAAO,e,QCZjDT,EAAiB,CACnBZ,MAAM,CACFa,IAAK,WAETG,UAAU,CACNH,IAAK,WAETI,OAAO,CACHJ,IAAK,YAMP2C,EAAU,CACZC,OAAS,CACLC,SAAS,GAEbC,SAAS,CACLC,MAAM,CACFhB,OAAO,IAGfiB,qBAAqB,EACrBC,SAAS,CACLC,KAAM,QACNC,WAAW,EACXC,UAAU,CACNC,MAAO,SAASC,EAAY5C,GACxB,OAAOH,IAAQ+C,EAAYC,OAAO/C,OAAO,WAIrDgD,OAAO,CACHC,MAAM,CACF,CACIC,KAAK,OACLC,KAAM,CACFnD,OAAO,WACPoD,cAAc,QAI1BC,MAAM,CACF,CACIC,UAAU,CACNjB,SAAS,GAEbkB,MAAM,CACFC,SAAU,SAAST,EAAMU,EAAMC,GAC3B,OAAO3D,IAAQgD,GAAO/C,OAAO,YAQ/C2D,EAAiB,SAACzD,GAA0B,IAG1C0D,EAHqBhF,EAAoB,uDAAX,QAC5BiF,EAAW,GAGjB,IAAI,IAAIC,KAFR9B,QAAQC,IAAI,uCAAuC/B,EAAKtB,IAExCsB,EAAKvB,MAAO,CACxB,GAAGiF,EAAc,CACb,IAAIG,EAAe,CACfC,EAAGF,EACHG,EAAG/D,EAAKtB,GAAUkF,GAAMF,GAG5BC,EAAUK,KAAKH,GAEnBH,EAAgB1D,EAAKtB,GAAUkF,GAEnC,OAAOD,GAkDIM,MA/Cf,YAAoD,IAAhCC,EAA+B,EAA/BA,YAA+B,IAAnBxF,gBAAmB,MAAV,QAAU,IACvByF,mBAAS,IADc,mBACxCnE,EADwC,KAClCoE,EADkC,KAMzCzD,EAAsB,cAAhBuD,EACZ,6DADY,oDAEkCA,EAFlC,iBAsBZ,OAlBAG,qBAAU,YACS,uCAAG,sBAAAlE,EAAA,sEACRmE,MAAM3D,GACX4D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvE,GAEe,cAAdkE,IACClE,EAAOA,EAAI,UAEf,IAAM2D,EAAYF,EAAezD,EAAKtB,GACtC0F,EAAQT,MATE,2CAAH,qDAYfe,KAED,CAAChG,EAASwF,IAIT,8BACS,OAAJlE,QAAI,IAAJA,OAAA,EAAAA,EAAM2E,QAAO,GACN,kBAAC,IAAD,CACA1C,QAASA,EACTjC,KAAO,CACP4E,SAAS,CAAC,CACNC,gBAAgBxF,EAAgBX,GAAUY,IAC1CwF,YAAYzF,EAAgBX,GAAUY,IACtCU,KAAMA,S,OCwBf+E,MApIf,WAAgB,IAAD,EACqBZ,mBAAS,IAD9B,mBACN7D,EADM,KACK0E,EADL,OAEiBb,mBAAS,aAF1B,mBAENrD,EAFM,KAEGmE,EAFH,OAGyBd,mBAAS,IAHlC,mBAGNnD,EAHM,KAGOkE,EAHP,OAIqBf,mBAAS,IAJ9B,mBAINgB,EAJM,KAIKC,EAJL,OAKoBjB,mBAAS,CAAClD,IAAK,QAAUoE,KAAK,UALlD,mBAKNC,EALM,KAKIC,EALJ,OAMiBpB,mBAAS,GAN1B,mBAMNqB,EANM,KAMGC,EANH,OAO0BtB,mBAAS,IAPnC,mBAONuB,EAPM,KAOQC,EAPR,OAQkBxB,mBAAS,SAR3B,mBAQN5D,EARM,KAQKqF,EARL,OASwBzB,mBAAS,aATjC,mBASN0B,EATM,KASMC,EATN,KAWbzB,qBAAU,WACNC,MAAM,sCACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvE,GACLkF,EAAelF,QAEnB,IAGFqE,qBAAU,YACc,uCAAG,sBAAAlE,EAAA,sEACjBmE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvE,GACL,IAAMM,EAAYN,EAAKa,KAAI,SAACC,GAAD,MACzB,CACEiF,KAAMjF,EAAQA,QACd+B,MAAO/B,EAAQE,YAAYgF,SAGzB/F,EAAaF,EAASC,GAC5BoF,EAAanF,GACb+E,EAAa1E,GACbqF,EAAgB3F,MAbK,2CAAH,qDAiBtBiG,KACC,IAGH,IAAMC,EAAe,uCAAG,WAAMC,GAAN,iBAAAhG,EAAA,6DAChB+D,EAAciC,EAAMC,OAAOvD,MAEjCoC,EAAWf,GACLvD,EAAsB,cAAhBuD,EACZ,qCADY,mDAEiCA,GANvB,SASfI,MAAM3D,GACX4D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvE,GACJ8F,EAAe9F,EAAKc,SACnBoE,EAAelF,GACfuF,EAAa,CAACvF,EAAKgB,YAAYC,IAAKjB,EAAKgB,YAAYE,OACrDuE,EAAW,MAfO,2CAAH,sDAoBrB,OACE,yBAAKxG,UAAU,OAEb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACX,gDACA,kBAACoH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAChBC,SAAUN,EACVrD,MAAO/B,GACP,kBAAC2F,EAAA,EAAD,CAAU5D,MAAM,aAAhB,aACGvC,EAAUO,KAAI,SAACC,GAAD,OACb,kBAAC2F,EAAA,EAAD,CAAU5D,MAAO/B,EAAQ+B,OAAQ/B,EAAQiF,YAQnD,yBAAK9G,UAAU,aACL,kBAAC,EAAD,CACAN,OAAK,EACHC,OAAoB,UAAZ2B,EACRvB,QAAS,SAAC0H,GAAD,OAAKd,EAAY,UAC1BpH,MAAM,oBACNC,MAAOkB,EAAgBqB,EAAY2F,YACnC9H,MAAOc,EAAgBqB,EAAYvC,SAErC,kBAAC,EAAD,CACEG,OAAoB,cAAZ2B,EACRvB,QAAS,SAAC0H,GAAD,OAAKd,EAAY,cAC1BpH,MAAM,YACNC,MAAOkB,EAAgBqB,EAAY4F,gBACnC/H,MAAOc,EAAgBqB,EAAYvB,aAErC,kBAAC,EAAD,CACEd,OAAK,EACLC,OAAoB,WAAZ2B,EACRvB,QAAS,SAAC0H,GAAD,OAAKd,EAAY,WAC1BpH,MAAM,SACNC,MAAOkB,EAAgBqB,EAAY6F,aACnChI,MAAOc,EAAgBqB,EAAYtB,WAI/C,kBAAC,EAAD,CACAa,UAAWA,EACXD,UAAWoF,EACXlF,OAAQ8E,EACR7E,KAAM+E,KAKN,kBAACzG,EAAA,EAAD,CAAME,UAAU,aACZ,kBAACC,EAAA,EAAD,KACM,qDACA,kBAAC,EAAD,CAAOoB,UAAW6E,KAExB,kBAACjG,EAAA,EAAD,KACI,4BAAK2G,EAAL,QAAuBtF,GACrB,kBAAC,EAAD,CAAW2D,YAAapD,EAASpC,SAAU6B,QC1HvCuG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,a","file":"static/js/main.433e7a78.chunk.js","sourcesContent":["import React from 'react'\nimport { Card , CardContent, Typography} from '@material-ui/core';\nimport './InfoBox.css';\n\nfunction InfoBox({title, caseType,cases, isRed,active,total, ...props}) {\n    return (\n        <Card onClick ={props.onClick} \n        className={`infobox ${active && \"infobox--selected\"} ${isRed && \"infobox--red\"}`}>\n            <CardContent>\n                <Typography color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n    <h2 className=\"infobox_cases\">{cases}</h2>\n    <Typography className=\"infobox_total\" color=\"textSecondary\">{total} total</Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import numeral from \"numeral\";\nimport React from 'react'\nimport {Circle,Popup} from \"react-leaflet\";\n\nconst casesTypeColors ={\n    cases:{\n        hex: '#002266',\n        rgb: \"rgb(204,16,54)\",\n        multiplier:800,\n    },\n    recovered:{\n        hex: '#7dd71d',\n        rgb: \"rgb(125,215,29)\",\n        multiplier:1200,\n    },\n    deaths:{\n        hex: '#fb4443',\n        rgb: \"rgb(251,68,67)\",\n        multiplier:2000,\n    },\n\n}\n\nexport const prettyPrintStat =(stat) => (\n    stat?`+${numeral(stat).format(\"0.0a\")}`:\"+0\");\n\nexport const sortdata = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a,b)=>{\n        if(a.cases>b.cases){\n            return -1;\n        } else {\n            return 1;\n        }\n    });\n    return sortedData;\n};\n\n\nexport const showDataomMap = (data, casesType=\"cases\") => (\n    data.map(country=>(\n        <Circle\n        center={[country.countryInfo.lat,country.countryInfo.long]}\n        fillOpacity={0.4}\n        color ={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={\n            Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\n        }\n        >\n            <Popup>\n                \n                <div className=\"info_container\">\n                    <div className =\"info_flag\"\n                        style={{backgroundImage:`url(${country.countryInfo.flag})`}}\n                    >\n\n                    </div>\n                    <div className=\"info_name\">{country.country}</div>\n                    <div className=\"info_cases\">Cases:{numeral(country.cases).format(\"0.0\")}</div>\n                    <div className=\"info_recovered\">Recovered:{numeral(country.recovered).format(\"0.0\")}</div>\n                    <div className=\"info_deaths\">Deaths:{numeral(country.deaths).format(\"0.0\")}</div>\n                </div>\n\n            </Popup>\n        </Circle>\n    ))\n);\n\n","import React from 'react'\nimport {Map as LeafLetMap, TileLayer} from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataomMap } from '../util';\n\nfunction Map({countries,casesType,center, zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafLetMap center={center} zoom={zoom}>\n                <TileLayer \n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy;<a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n\n                {/* loop through countries and draw circles */}\n                {showDataomMap(countries,casesType)}\n            </LeafLetMap>\n            \n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\";\n\nfunction Table({countries}) {\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\",countries)\n    return (\n        <div className=\"table\">\n            { countries.map(({country, cases,countryInfo}) => (\n                <tr>\n                    {/* <td>{country}</td> */}\n                    <td className=\"table_info\">\n                        <img className =\"table_flag\"\n                        src={countryInfo.flag}/>\n                        \n                        <div>{country}</div>\n                    </td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default Table;\n","import React ,{useState, useEffect} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport \"./Map.css\";\n\nconst casesTypeColors ={\n    cases:{\n        hex: '#002266',\n    },\n    recovered:{\n        hex: '#7dd71d',\n    },\n    deaths:{\n        hex: '#fb4443',\n    },\n\n}\n\n\nconst options = {\n    legend : {\n        display: false,\n    },\n    elements:{\n        point:{\n            radius:0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips:{\n        mode: \"index\",\n        interesct: false,\n        callbacks:{\n            label: function(tooltipItem,data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales:{\n        xAxes:[\n            {\n                type:\"time\",\n                time: {\n                    format:\"MM/DD/YY\",\n                    tooltipFormat:\"ll\",\n                },\n            },\n        ],\n        yAxes:[\n            {\n                gridlines:{\n                    display: false,\n                },\n                ticks:{\n                    callback: function(value,index,values){\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    }\n}\n\nconst buikdChartData = (data,caseType=\"cases\") =>{\n    const chartData =[];\n    console.log(\"Inside build data-------------------\",data[caseType]);\n    let lastDataPoint;\n    for(let date in data.cases) {\n        if(lastDataPoint){\n            let newDataPoint = {\n                x: date,\n                y: data[caseType][date]-lastDataPoint,\n            }\n\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[caseType][date];\n    };\n    return chartData;\n};\n\nfunction LineGraph({countryCode,caseType=\"cases\"}) {\n    const [data, setData] = useState({});\n\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\n\n    const url = countryCode === 'worldwide' ? \n    'https://disease.sh/v3/covid-19/historical/all?lastdays=120' :\n     `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n\n    useEffect(() => {\n        const fetchData = async()=>{\n            await fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                \n                if(countryCode!==\"worldwide\"){\n                    data = data['timeline'];;\n                }\n                const chartData = buikdChartData(data,caseType);\n                setData(chartData);\n            });\n        }\n        fetchData();\n        \n    }, [caseType,countryCode]);\n\n    \n    return (\n        <div>\n            {data?.length>0 && (\n                    <Line \n                    options={options}\n                    data= {{\n                    datasets:[{\n                        backgroundColor:casesTypeColors[caseType].hex,\n                        borderColor:casesTypeColors[caseType].hex,\n                        data: data,\n                    },\n                ],\n                }} />\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React , {useState, useEffect}from 'react';\nimport './App.css';\nimport {FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map';\nimport { sortdata, prettyPrintStat } from './util';\nimport Table from './components/Table';\nimport LineGraph from './components/LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]) ;\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter,setMapCenter] = useState({lat: 34.8076 , lng:-40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries]= useState([]);\n  const [casesType, setCaseType]=useState(\"cases\");\n  const [countryName,setCountryName] = useState(\"worldwide\")\n\n  useEffect(()=>{\n      fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n     });\n  },[]);\n\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortdata(data);\n        setTableData(sortedData);\n        setCountries(countries);\n        setMapCountries(data);\n      });\n      \n    };\n    getCountriesData()\n  }, []);\n\n\n  const onCountryChange = async(event) => {\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? \n    'https://disease.sh/v3/covid-19/all' :\n     `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\n     await fetch(url)\n     .then(response => response.json())\n     .then(data => {\n       setCountryName(data.country);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n     });\n  };\n\n  \n  return (\n    <div className=\"app\">\n\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl>\n            <Select variant=\"outlined\" \n            onChange={onCountryChange}\n            value={country}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country)=>(\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              \n            </Select>\n          </FormControl>\n      </div>\n\n\n      <div className=\"app_stats\">\n                <InfoBox \n                isRed\n                  active={casesType===\"cases\"}\n                  onClick={(e)=>setCaseType(\"cases\")}\n                  title=\"Coronavirus Cases\" \n                  cases={prettyPrintStat(countryInfo.todayCases)} \n                  total={prettyPrintStat(countryInfo.cases)}\n                />\n                <InfoBox \n                  active={casesType===\"recovered\"}\n                  onClick={(e)=>setCaseType(\"recovered\")}\n                  title=\"Recovered\" \n                  cases={prettyPrintStat(countryInfo.todayRecovered)} \n                  total={prettyPrintStat(countryInfo.recovered)}\n                />\n                <InfoBox \n                  isRed\n                  active={casesType===\"deaths\"}\n                  onClick={(e)=>setCaseType(\"deaths\")}\n                  title=\"Deaths\" \n                  cases={prettyPrintStat(countryInfo.todayDeaths)} \n                  total={prettyPrintStat(countryInfo.deaths)}\n                />\n      </div>\n\n      <Map\n      casesType={casesType}\n      countries={mapCountries}\n      center={mapCenter}\n      zoom={mapZoom}\n      />\n\n\n      </div>\n      <Card className=\"app_right\">\n          <CardContent>\n                <h3>Live Cases by country</h3>\n                <Table countries={tableData}/>\n          </CardContent>\n          <CardContent>\n              <h3>{countryName} new {casesType}</h3>\n                <LineGraph countryCode={country} caseType={casesType} />\n          </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}